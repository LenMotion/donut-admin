<template>
  <div>
    <BasicTable @register="registerTable">
      <template #toolbar>
        <a-button type="primary" v-auth="'${moduleName}:${lowClassName}:save'" @click="handleCreate"
          >新增${featureName}</a-button
        >
      </template>
<% if (statusApi==true) { %>
      <template #status="{ record }">
        <BaseStatusSwitch
          :value="record.status"
          :api="statusApi"
          :id="record.id"
          @success="reload"
          perm-code="${moduleName}:${lowClassName}:status"
        />
      </template>
<% } %>
      <template #action="{ record }">
        <TableAction
          :actions="[
            {
              icon: 'clarity:note-edit-line',
              auth: '${moduleName}:${lowClassName}:save',
              onClick: handleEdit.bind(null, record),
            },
            {
              icon: 'ant-design:delete-outlined',
              color: 'error',
              auth: '${moduleName}:${lowClassName}:remove',
              popConfirm: {
                title: '是否确认删除',
                confirm: handleDelete.bind(null, record),
              },
            },
          ]"
        />
      </template>
    </BasicTable>

    <${className}Drawer @register="registerDrawer" @success="reload()" />
  </div>
</template>

<script setup lang="ts">
  import { BasicTable, useTable, TableAction } from '@/components/Table';
  import { listApi, deleteApi, statusApi } from '@/api/${moduleName}/${lowClassName}';
  import { columns, searchFormSchema } from './${lowClassName}.data';
  import { useDrawer } from '@/components/Drawer';
  import ${className}Drawer from './${className}Drawer.vue';
<% if (statusApi==true) { %>
  import BaseStatusSwitch from '@/components/Donut/BaseStatusSwitch/index.vue';
<% } %>

  defineOptions({ name: '${className}Management' });

  const [registerDrawer, { openDrawer }] = useDrawer();
  const [registerTable, { reload }] = useTable({
    title: '${featureName}列表',
    api: listApi,
    columns,
    formConfig: {
      labelWidth: 90,
      schemas: searchFormSchema,
      baseColProps: { xl: 8, xxl: 6 },
    },
    useSearchForm: true,
    showTableSetting: true,
    bordered: true,
    showIndexColumn: true,
    actionColumn: {
      width: 80,
      title: '操作',
      dataIndex: 'action',
      slots: { customRender: 'action' },
      fixed: 'right',
    },
  });

  function handleCreate() {
    openDrawer(true, {
      isUpdate: false,
    });
  }

  function handleEdit(record: Recordable) {
    openDrawer(true, {
      record,
      isUpdate: true,
    });
  }

  function handleDelete(record: Recordable) {
    deleteApi(record.id).then(() => {
      reload();
    });
  }
</script>
